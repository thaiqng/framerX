"use strict";
// ❗️
// This code is generated by the Services build process. Do not modify it.
// See the Services README for more information.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("../../runtime");
__export(require("../../runtime"));
/** ♻️ Beep service generated from .d.ts — do not modify */
var Beep;
(function (Beep) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(Beep.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(Beep.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: Beep.service, implementation }); }),
        };
    }
    Beep.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    Beep.unregister = unregister;
})(Beep = exports.Beep || (exports.Beep = {}));
/** ♻️ Clipboard service generated from .d.ts — do not modify */
var Clipboard;
(function (Clipboard) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(Clipboard.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(Clipboard.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: Clipboard.service, implementation }); }),
        };
    }
    Clipboard.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    Clipboard.unregister = unregister;
})(Clipboard = exports.Clipboard || (exports.Clipboard = {}));
/** ♻️ ColorSampler service generated from .d.ts — do not modify */
var ColorSampler;
(function (ColorSampler) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ColorSampler.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ColorSampler.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ColorSampler.service, implementation }); }),
        };
    }
    ColorSampler.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ColorSampler.unregister = unregister;
})(ColorSampler = exports.ColorSampler || (exports.ColorSampler = {}));
/** ♻️ FeedbackService service generated from .d.ts — do not modify */
var FeedbackService;
(function (FeedbackService) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(FeedbackService.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(FeedbackService.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: FeedbackService.service, implementation }); }),
        };
    }
    FeedbackService.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    FeedbackService.unregister = unregister;
})(FeedbackService = exports.FeedbackService || (exports.FeedbackService = {}));
/** ♻️ FeedbackDocument service generated from .d.ts — do not modify */
var FeedbackDocument;
(function (FeedbackDocument) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(FeedbackDocument.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(FeedbackDocument.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: FeedbackDocument.service, implementation }); }),
        };
    }
    FeedbackDocument.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    FeedbackDocument.unregister = unregister;
})(FeedbackDocument = exports.FeedbackDocument || (exports.FeedbackDocument = {}));
/** ♻️ GestureEventTarget service generated from .d.ts — do not modify */
var GestureEventTarget;
(function (GestureEventTarget) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(GestureEventTarget.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(GestureEventTarget.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: GestureEventTarget.service, implementation }); }),
        };
    }
    GestureEventTarget.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    GestureEventTarget.unregister = unregister;
})(GestureEventTarget = exports.GestureEventTarget || (exports.GestureEventTarget = {}));
/** ♻️ MenuActionTarget service generated from .d.ts — do not modify */
var MenuActionTarget;
(function (MenuActionTarget) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(MenuActionTarget.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(MenuActionTarget.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: MenuActionTarget.service, implementation }); }),
        };
    }
    MenuActionTarget.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    MenuActionTarget.unregister = unregister;
})(MenuActionTarget = exports.MenuActionTarget || (exports.MenuActionTarget = {}));
/** ♻️ ContextMenuPresenter service generated from .d.ts — do not modify */
var ContextMenuPresenter;
(function (ContextMenuPresenter) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ContextMenuPresenter.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ContextMenuPresenter.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ContextMenuPresenter.service, implementation }); }),
        };
    }
    ContextMenuPresenter.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ContextMenuPresenter.unregister = unregister;
})(ContextMenuPresenter = exports.ContextMenuPresenter || (exports.ContextMenuPresenter = {}));
/** ♻️ PreviewDocument service generated from .d.ts — do not modify */
var PreviewDocument;
(function (PreviewDocument) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(PreviewDocument.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(PreviewDocument.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: PreviewDocument.service, implementation }); }),
        };
    }
    PreviewDocument.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    PreviewDocument.unregister = unregister;
})(PreviewDocument = exports.PreviewDocument || (exports.PreviewDocument = {}));
/** ♻️ PreviewFrame service generated from .d.ts — do not modify */
var PreviewFrame;
(function (PreviewFrame) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(PreviewFrame.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(PreviewFrame.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: PreviewFrame.service, implementation }); }),
        };
    }
    PreviewFrame.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    PreviewFrame.unregister = unregister;
})(PreviewFrame = exports.PreviewFrame || (exports.PreviewFrame = {}));
/** ♻️ ProjectPackage service generated from .d.ts — do not modify */
var ProjectPackage;
(function (ProjectPackage) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ProjectPackage.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ProjectPackage.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ProjectPackage.service, implementation }); }),
        };
    }
    ProjectPackage.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ProjectPackage.unregister = unregister;
})(ProjectPackage = exports.ProjectPackage || (exports.ProjectPackage = {}));
/** ♻️ ProjectState service generated from .d.ts — do not modify */
var ProjectState;
(function (ProjectState) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ProjectState.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ProjectState.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ProjectState.service, implementation }); }),
        };
    }
    ProjectState.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ProjectState.unregister = unregister;
})(ProjectState = exports.ProjectState || (exports.ProjectState = {}));
/** ♻️ PublicStoreClient service generated from .d.ts — do not modify */
var PublicStoreClient;
(function (PublicStoreClient) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(PublicStoreClient.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(PublicStoreClient.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: PublicStoreClient.service, implementation }); }),
        };
    }
    PublicStoreClient.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    PublicStoreClient.unregister = unregister;
})(PublicStoreClient = exports.PublicStoreClient || (exports.PublicStoreClient = {}));
/** ♻️ PrivateStoreClient service generated from .d.ts — do not modify */
var PrivateStoreClient;
(function (PrivateStoreClient) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(PrivateStoreClient.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(PrivateStoreClient.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: PrivateStoreClient.service, implementation }); }),
        };
    }
    PrivateStoreClient.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    PrivateStoreClient.unregister = unregister;
})(PrivateStoreClient = exports.PrivateStoreClient || (exports.PrivateStoreClient = {}));
/** ♻️ TutorialDocument service generated from .d.ts — do not modify */
var TutorialDocument;
(function (TutorialDocument) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(TutorialDocument.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(TutorialDocument.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: TutorialDocument.service, implementation }); }),
        };
    }
    TutorialDocument.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    TutorialDocument.unregister = unregister;
})(TutorialDocument = exports.TutorialDocument || (exports.TutorialDocument = {}));
/** ♻️ TutorialFrame service generated from .d.ts — do not modify */
var TutorialFrame;
(function (TutorialFrame) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(TutorialFrame.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(TutorialFrame.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: TutorialFrame.service, implementation }); }),
        };
    }
    TutorialFrame.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    TutorialFrame.unregister = unregister;
})(TutorialFrame = exports.TutorialFrame || (exports.TutorialFrame = {}));
/** ♻️ ZzzTestingBeep service generated from .d.ts — do not modify */
var ZzzTestingBeep;
(function (ZzzTestingBeep) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ZzzTestingBeep.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ZzzTestingBeep.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ZzzTestingBeep.service, implementation }); }),
        };
    }
    ZzzTestingBeep.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ZzzTestingBeep.unregister = unregister;
})(ZzzTestingBeep = exports.ZzzTestingBeep || (exports.ZzzTestingBeep = {}));
/** ♻️ ZzzTestingStreams service generated from .d.ts — do not modify */
var ZzzTestingStreams;
(function (ZzzTestingStreams) {
    function on(channel) {
        // Note: capture the shared service manager here so testing behavior is predictable
        const sharedServices = runtime_1.ServiceManager.shared();
        return {
            expect: () => sharedServices.expect(ZzzTestingStreams.service, channel),
            discover: (options) => __awaiter(this, void 0, void 0, function* () { return sharedServices.discover(ZzzTestingStreams.service, channel, options); }),
            register: (implementation) => __awaiter(this, void 0, void 0, function* () { return sharedServices.register({ channel, service: ZzzTestingStreams.service, implementation }); }),
        };
    }
    ZzzTestingStreams.on = on;
    function unregister(implementation) {
        return __awaiter(this, void 0, void 0, function* () {
            runtime_1.ServiceManager.shared().unregister(implementation);
        });
    }
    ZzzTestingStreams.unregister = unregister;
})(ZzzTestingStreams = exports.ZzzTestingStreams || (exports.ZzzTestingStreams = {}));
// Service helpers
var ServiceRuntime;
(function (ServiceRuntime) {
    /* ♻️ Generated from .d.ts — do not modify */
    let BeepHelper;
    (function (BeepHelper) {
        const service = {
            id: "__Beep__",
            fingerprint: "61a1004615dc1e33269b7165105b3499",
            methods: {
                beep: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        Beep.service = service || Beep.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            beep() {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "beep",
                        argument: undefined,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(BeepHelper = ServiceRuntime.BeepHelper || (ServiceRuntime.BeepHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ClipboardHelper;
    (function (ClipboardHelper) {
        const service = {
            id: "__Clipboard__",
            fingerprint: "5b99817461711d11d54dcfffa9dffa31",
            methods: {
                write: {},
                read: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        Clipboard.service = service || Clipboard.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            write(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "write",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            read(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "read",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(ClipboardHelper = ServiceRuntime.ClipboardHelper || (ServiceRuntime.ClipboardHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ColorSamplerHelper;
    (function (ColorSamplerHelper) {
        const service = {
            id: "__ColorSampler__",
            fingerprint: "47e58950414de7a0679a8b7847789793",
            methods: {
                sampleColor: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ColorSampler.service = service || ColorSampler.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            sampleColor() {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "sampleColor",
                        argument: undefined,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(ColorSamplerHelper = ServiceRuntime.ColorSamplerHelper || (ServiceRuntime.ColorSamplerHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let FeedbackServiceHelper;
    (function (FeedbackServiceHelper) {
        const service = {
            id: "__FeedbackService__",
            fingerprint: "11a73fd6bda757a0781a5f91ac88c94f",
            methods: {
                getSessionIdentity: {},
                getThreads: {},
                createThread: {},
                updateThread: {},
                createComment: {},
                updateComment: {},
                deleteComment: {},
                markAsSeen: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        FeedbackService.service = service || FeedbackService.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            getSessionIdentity() {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "getSessionIdentity",
                        argument: undefined,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            getThreads(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "getThreads",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            createThread(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "createThread",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            updateThread(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "updateThread",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            createComment(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "createComment",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            updateComment(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "updateComment",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            deleteComment(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "deleteComment",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            markAsSeen(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "markAsSeen",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(FeedbackServiceHelper = ServiceRuntime.FeedbackServiceHelper || (ServiceRuntime.FeedbackServiceHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let FeedbackDocumentHelper;
    (function (FeedbackDocumentHelper) {
        const service = {
            id: "__FeedbackDocument__",
            fingerprint: "66340a6f00264f599ff1be4100384bc7",
            methods: {
                toggleFeedback: {},
                openThread: {},
                feedbackStateStream: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        FeedbackDocument.service = service || FeedbackDocument.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            toggleFeedback(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "toggleFeedback",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            openThread(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "openThread",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            feedbackStateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("feedbackStateStream", this.helper);
            }
        }
    })(FeedbackDocumentHelper = ServiceRuntime.FeedbackDocumentHelper || (ServiceRuntime.FeedbackDocumentHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let GestureEventTargetHelper;
    (function (GestureEventTargetHelper) {
        const service = {
            id: "__GestureEventTarget__",
            fingerprint: "eea70ddc08f14b4c6d18b1989490f536",
            methods: {
                dispatchMagnificationEvent: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        GestureEventTarget.service = service || GestureEventTarget.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            dispatchMagnificationEvent(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "dispatchMagnificationEvent",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(GestureEventTargetHelper = ServiceRuntime.GestureEventTargetHelper || (ServiceRuntime.GestureEventTargetHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let MenuActionTargetHelper;
    (function (MenuActionTargetHelper) {
        const service = {
            id: "__MenuActionTarget__",
            fingerprint: "c4db8a6e44e670207d8e4fa156aa7438",
            methods: {
                validate: {},
                dispatch: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        MenuActionTarget.service = service || MenuActionTarget.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            validate(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "validate",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            dispatch(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "dispatch",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(MenuActionTargetHelper = ServiceRuntime.MenuActionTargetHelper || (ServiceRuntime.MenuActionTargetHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ContextMenuPresenterHelper;
    (function (ContextMenuPresenterHelper) {
        const service = {
            id: "__ContextMenuPresenter__",
            fingerprint: "a93df917284e037b101c5c2e51738ad7",
            methods: {
                showContextMenu: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ContextMenuPresenter.service = service || ContextMenuPresenter.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            showContextMenu(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "showContextMenu",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(ContextMenuPresenterHelper = ServiceRuntime.ContextMenuPresenterHelper || (ServiceRuntime.ContextMenuPresenterHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let PreviewDocumentHelper;
    (function (PreviewDocumentHelper) {
        const service = {
            id: "__PreviewDocument__",
            fingerprint: "51efe1176f3fce3f563bacf46b7a8f38",
            methods: {
                toggleConsole: {},
                reload: {},
                previewStateStream: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        PreviewDocument.service = service || PreviewDocument.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            toggleConsole(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "toggleConsole",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            reload() {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "reload",
                        argument: undefined,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            previewStateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("previewStateStream", this.helper);
            }
        }
    })(PreviewDocumentHelper = ServiceRuntime.PreviewDocumentHelper || (ServiceRuntime.PreviewDocumentHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let PreviewFrameHelper;
    (function (PreviewFrameHelper) {
        const service = {
            id: "__PreviewFrame__",
            fingerprint: "6c16a1967c8b3219075f274377088943",
            methods: {
                load: {},
                toggleSelectionLock: {},
                triggerPreviewRemoteEvent: {},
                scriptUpdateStream: {},
                previewUpdateStream: {},
                canvasUpdateStream: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        PreviewFrame.service = service || PreviewFrame.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            load(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "load",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            toggleSelectionLock(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "toggleSelectionLock",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            triggerPreviewRemoteEvent(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "triggerPreviewRemoteEvent",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            scriptUpdateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("scriptUpdateStream", this.helper);
            }
            previewUpdateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("previewUpdateStream", this.helper);
            }
            canvasUpdateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("canvasUpdateStream", this.helper);
            }
        }
    })(PreviewFrameHelper = ServiceRuntime.PreviewFrameHelper || (ServiceRuntime.PreviewFrameHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ProjectPackageHelper;
    (function (ProjectPackageHelper) {
        const service = {
            id: "__ProjectPackage__",
            fingerprint: "aaddaff12be3185d4c3117740d28aef8",
            methods: {
                uploadDesignAsset: {},
                uploadReadme: {},
                fetchReadme: {},
                fetchPackageJson: {},
                addPackageDependency: {},
                publishPackage: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ProjectPackage.service = service || ProjectPackage.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            uploadDesignAsset(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "uploadDesignAsset",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            uploadReadme(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "uploadReadme",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchReadme() {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchReadme",
                        argument: undefined,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackageJson() {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackageJson",
                        argument: undefined,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            addPackageDependency(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "addPackageDependency",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            publishPackage(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "publishPackage",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(ProjectPackageHelper = ServiceRuntime.ProjectPackageHelper || (ServiceRuntime.ProjectPackageHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ProjectStateHelper;
    (function (ProjectStateHelper) {
        const service = {
            id: "__ProjectState__",
            fingerprint: "048e40fab7630eb58796ffaad82cf292",
            methods: {
                assetChangeStream: {},
                stateStream: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ProjectState.service = service || ProjectState.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            assetChangeStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("assetChangeStream", this.helper);
            }
            stateStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("stateStream", this.helper);
            }
        }
    })(ProjectStateHelper = ServiceRuntime.ProjectStateHelper || (ServiceRuntime.ProjectStateHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let PublicStoreClientHelper;
    (function (PublicStoreClientHelper) {
        const service = {
            id: "__PublicStoreClient__",
            fingerprint: "eecb1c9368e65d23d2cbbce93b66cff3",
            methods: {
                findByName: {},
                containsPackage: {},
                toggleFavorite: {},
                fetchRecents: {},
                fetchPackagesBySection: {},
                fetchPackagesByPublisher: {},
                fetchPackagesByPopularity: {},
                fetchFeaturedPackages: {},
                search: {},
                getPublishStatus: {},
                fetchPreflight: {},
                removePackage: {},
                fetchMeta: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        PublicStoreClient.service = service || PublicStoreClient.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            findByName(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "findByName",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            containsPackage(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "containsPackage",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            toggleFavorite(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "toggleFavorite",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchRecents(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchRecents",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesBySection(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesBySection",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesByPublisher(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesByPublisher",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesByPopularity(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesByPopularity",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchFeaturedPackages(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchFeaturedPackages",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            search(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "search",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            getPublishStatus(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "getPublishStatus",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPreflight(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPreflight",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            removePackage(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "removePackage",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchMeta(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchMeta",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(PublicStoreClientHelper = ServiceRuntime.PublicStoreClientHelper || (ServiceRuntime.PublicStoreClientHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let PrivateStoreClientHelper;
    (function (PrivateStoreClientHelper) {
        const service = {
            id: "__PrivateStoreClient__",
            fingerprint: "a762c30223d99fe2062dceb634663456",
            methods: {
                findByName: {},
                containsPackage: {},
                toggleFavorite: {},
                fetchRecents: {},
                fetchPackagesBySection: {},
                fetchPackagesByPublisher: {},
                fetchPackagesByPopularity: {},
                fetchFeaturedPackages: {},
                search: {},
                getPublishStatus: {},
                fetchPreflight: {},
                removePackage: {},
                fetchMeta: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        PrivateStoreClient.service = service || PrivateStoreClient.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            findByName(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "findByName",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            containsPackage(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "containsPackage",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            toggleFavorite(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "toggleFavorite",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchRecents(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchRecents",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesBySection(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesBySection",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesByPublisher(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesByPublisher",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPackagesByPopularity(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPackagesByPopularity",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchFeaturedPackages(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchFeaturedPackages",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            search(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "search",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            getPublishStatus(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "getPublishStatus",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchPreflight(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchPreflight",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            removePackage(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "removePackage",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            fetchMeta(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.helper({
                        method: "fetchMeta",
                        argument: args,
                    }); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(PrivateStoreClientHelper = ServiceRuntime.PrivateStoreClientHelper || (ServiceRuntime.PrivateStoreClientHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let TutorialDocumentHelper;
    (function (TutorialDocumentHelper) {
        const service = {
            id: "__TutorialDocument__",
            fingerprint: "35e1fd18f1a36a4a8ca53ab493af5cee",
            methods: {
                requestTutorialContent: {},
                doTutorialStep: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        TutorialDocument.service = service || TutorialDocument.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            requestTutorialContent() {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "requestTutorialContent",
                        argument: undefined,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            doTutorialStep(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "doTutorialStep",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(TutorialDocumentHelper = ServiceRuntime.TutorialDocumentHelper || (ServiceRuntime.TutorialDocumentHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let TutorialFrameHelper;
    (function (TutorialFrameHelper) {
        const service = {
            id: "__TutorialFrame__",
            fingerprint: "03110c1e38622c13e0c14d82fbe18ee2",
            methods: {
                presentTutorialContent: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        TutorialFrame.service = service || TutorialFrame.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            presentTutorialContent(args) {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "presentTutorialContent",
                        argument: args,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(TutorialFrameHelper = ServiceRuntime.TutorialFrameHelper || (ServiceRuntime.TutorialFrameHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ZzzTestingBeepHelper;
    (function (ZzzTestingBeepHelper) {
        const service = {
            id: "__ZzzTestingBeep__",
            fingerprint: "61a1004615dc1e33269b7165105b3499",
            methods: {
                beep: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ZzzTestingBeep.service = service || ZzzTestingBeep.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            beep() {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "beep",
                        argument: undefined,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
        }
    })(ZzzTestingBeepHelper = ServiceRuntime.ZzzTestingBeepHelper || (ServiceRuntime.ZzzTestingBeepHelper = {}));
    /* ♻️ Generated from .d.ts — do not modify */
    let ZzzTestingStreamsHelper;
    (function (ZzzTestingStreamsHelper) {
        const service = {
            id: "__ZzzTestingStreams__",
            fingerprint: "87c8ebbbf12f755a6ab06cd27aeb016a",
            methods: {
                forceDiscovery: {},
                beepStream: {},
            },
            newOutgoingWrapper: (helper) => {
                return new OutgoingWrapper(helper);
            },
        };
        ZzzTestingStreams.service = service || ZzzTestingStreams.service;
        class OutgoingWrapper {
            constructor(helper) {
                this.helper = helper;
            }
            forceDiscovery() {
                return __awaiter(this, void 0, void 0, function* () {
                    void (yield this.helper({
                        method: "forceDiscovery",
                        argument: undefined,
                    })); // Unlike Swift, TypeScript service values are not currently validated or type-safe
                });
            }
            beepStream() {
                return new runtime_1.ServiceRuntimePrivate.StreamReader("beepStream", this.helper);
            }
        }
    })(ZzzTestingStreamsHelper = ServiceRuntime.ZzzTestingStreamsHelper || (ServiceRuntime.ZzzTestingStreamsHelper = {}));
})(ServiceRuntime = exports.ServiceRuntime || (exports.ServiceRuntime = {}));
