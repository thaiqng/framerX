/**
 * A subset of `map` which only contains keys that passed the predicate
 */
export declare const filterKeys: <T>(map: {
    [key: string]: T;
}, predicate: (key: string, val: T) => boolean) => {};
/**
 * Derives a new object from `map` where the values are transformed by applying the `mapper` function.
 */
export declare const mapValues: <Input, Output>(map: {
    [key: string]: Input;
}, mapper: (val: Input) => Output) => {
    [val: string]: Output;
};
/**
 * Splits the given map into two sub-maps by the given predicate.
 * The left map will contain keys that matched the predicate, the right map will contain keys that didn't.
 */
export declare const splitMap: <T>(map: {
    [key: string]: T;
}, predicate: (key: string) => boolean) => [{
    [key: string]: T;
}, {
    [key: string]: T;
}];
