declare type FramerPackage = Readonly<{
    icon: string;
    artwork: string;
    friendlyName: string;
    readme: string;
    license?: string;
    name: string;
    author: string;
    slug: string;
    version: string;
    updatedAt?: string;
    tags: ReadonlyArray<string>;
    size: number;
    favorites: number;
    downloads: number;
    isPrivate: boolean;
    isFavorite?: boolean;
    publisherId: string;
    /**
     * A map from [dependency name] => [dependency version]
     */
    peerDependencies?: any;
}>;
/**
 * An IPC friendly representation of a package.
 */
export interface Package extends FramerPackage {
}
/**
 * A type describing how a Package looks from the back-end's perspective.
 * The types mostly match Package's structure
 */
export declare type ApiPackage = Readonly<{
    icon: string;
    artwork: string;
    friendlyName: string;
    readme: string;
    license?: string;
    name: string;
    author: string;
    slug: string;
    version: string;
    updatedAt?: string;
    tags?: ReadonlyArray<string>;
    size: number;
    favorites: number;
    downloads: number;
    private: true | undefined;
    isFavorite?: boolean;
    publisherId: string;
    peerDependencies?: any;
}>;
export declare type ApiPackageMeta = Readonly<{
    /**
     * True for the Team Store, false otherwise.
     */
    private: boolean;
    url: string;
    ownerId: string;
    publisherId: string;
}>;
export declare type PackageMeta = Readonly<{
    /**
     * True for the Team Store, false otherwise.
     */
    isPrivate: boolean;
    url: string;
    ownerId: string;
    publisherId: string;
}>;
export declare type PackagesMetaResponse = {
    [key: string]: PackageMeta;
};
export declare type PublishStatus = Readonly<{
    status: "pending";
} | {
    status: "completed";
} | {
    status: "rejected";
    error: Readonly<{
        message: string;
    }>;
} | {
    status: "error";
    error: any;
}>;
declare type PreflightResponse = Readonly<{
    result: "success";
    suggestedVersion: string;
    slug: string;
    package: string;
}>;
declare type PreflightFailed = Readonly<{
    result: "failure";
    errorMessage: string;
}>;
export declare type Preflight = PreflightResponse | PreflightFailed;
export {};
